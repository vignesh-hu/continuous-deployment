version: 2
#
# Jobs are a collection of Steps. All of the steps in the job are executed in a single unit which consumes a CircleCI container from your plan while itâ€™s running.
# Job: "maven-build" job test and package demo application with Maven, persist JAR in workspace and store it as Artefacts
# Job: "aws-deploy" job get binary from attached workspace and deploy to AWS
# https://circleci.com/docs/2.0/jobs-steps
#
orbs:
  aws-s3: circleci/aws-s3@dev:alpha
  orb-tools: circleci/orb-tools@9.3
jobs:
  # Job to Build Maven application
  maven-build:
    
    # specify the version you desire here
    docker:
      - image: maven
      
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      
    steps:

      - checkout

      # Download and cache dependencies
      - restore_cache:
          key: demo-{{ checksum "pom.xml" }}
      
      - run: mvn dependency:go-offline
      
      - save_cache:
          paths:
            - ~/.m2
          key: demo-{{ checksum "pom.xml" }}
          
      # Run maven commands
      - run: mvn package
      
      # Store tests to compare builds      
      - store_test_results:
          path: target/surefire-reports
      # Store artifacts on CircleCI internal repository
      - store_artifacts:
          path: target/demo-1.0.jar
          
      # Persist the specified paths target/demo-1.0.jar) into the workspace for use in aws-deploy job. 
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is taken to be the root directory of the workspace.
          root: ~/repo/target
          # Must be relative path from root
          paths:
            - demo-1.0.jar

  # Job to Deploy spring-boot demo application to AWS BeanStalk
  aws-deploy:
    working_directory: ~/repo
    docker:
      - image: 'cimg/python:3.6'
      - image: account-id.dkr.ecr.us-east-1.amazonaws.com/org/repo:0.1
        aws_auth:
           aws_access_key_id    : $aws_access_id  # can specify string literal values
           aws_secret_access_key: $aws_secret_key_id
    steps:
#      - attach_workspace:
 #         # Must be absolute path or relative path from working_directory
#          at: ~/app/target
      
      - run:
        - name: set aws credentials
          command: |
            sudo yum install -y python-pip
            sudo yum install python2.7-dev
            sudo pip install awscli
            aws configure set aws_access_key_id $aws_access_id
            aws configure set aws_secret_access_key $aws_secret_key_id
        - name: copy to s3 bucket
          command: |
            aws s3 cp target/demo-1.0.jar  s3://flash-github/$CIRCLE_BUILD_NUM-demo-1.0.jar 
         
       # - name:copy to s3 bucket
       #  arguments: '--dryrun'
       #   from: target/demo-1.0.jar
       #    to: s3://deployment123/$CIRCLE_BUILD_NUM-demo-1.0.jar
        # - name: copy to s3 bucket
         #  command : aws s3 cp target/demo-1.0.jar  s3://flash-github/$CIRCLE_BUILD_NUM-demo-1.0.jar 
         
        - name: Create new ElasticBeanstalk Applicaiton Version
          command : |
             aws elasticbeanstalk create-application-version \
             --application-name sample \
             --source-bundle S3Bucket= s3://deployment123/$CIRCLE_BUILD_NUM-demo-1.0.jar,S3Key=$CIRCLE_BUILD_NUM-demo-1.0.jar \
             --version-label "Ver-$CIRCLE_BUILD_NUM" 
        - name: Deploy our new Application Version
          command : aws elasticbeanstalk update-environment --environment-name Sample-dev --version-label "Ver-$CIRCLE_BUILD_NUM" 

    
#
# Workflows: A workflow is a set of rules for defining a collection of jobs and their run order.
# In this demo, "aws-deploy" jobs is triggered only after the success of "maven-build" jobs
# see https://circleci.com/docs/2.0/workflows/
#
workflows:
  version: 2
  workflow:
    jobs:
      - maven-build
      - aws-deploy:
          requires:
            - maven-build
            
